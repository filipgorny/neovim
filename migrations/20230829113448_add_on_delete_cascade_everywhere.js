exports.up = async knex => up(knex)
exports.down = async knex => down(knex)

const addOnDeleteCascade = async (knex, trx, tableName, columnName, foreignTableName) =>
  knex.schema
    .table(tableName, table => {
      table.dropForeign(columnName)
      table
        .foreign(columnName)
        .references('id')
        .inTable(foreignTableName)
        .onDelete('CASCADE')
    })
    .transacting(trx)

const addOnDeleteSetNull = async (knex, trx, tableName, columnName, foreignTableName) =>
    knex.schema
      .table(tableName, table => {
        table.dropForeign(columnName)
        table
          .foreign(columnName)
          .references('id')
          .inTable(foreignTableName)
          .onDelete('SET NULL')
      })
      .transacting(trx)

const removeOnDelete = async (knex, trx, tableName, columnName, foreignTableName) =>
  knex.schema
    .table(tableName, table => {
      table.dropForeign(columnName)
      table
        .foreign(columnName)
        .references('id')
        .inTable(foreignTableName)
    })
    .transacting(trx)




const up = async knex => {
  return knex.transaction(async (trx) => {
    try {
      // // await addOnDeleteCascade(knex, trx, 'exams', 'layout_id', 'layouts') // we don't want to allow to remove layout if it's used in exam
      await addOnDeleteSetNull(knex, trx, 'exams', 'uploaded_by', 'admins')
      await addOnDeleteCascade(knex, trx, 'exam_sections', 'exam_id', 'exams')
      await addOnDeleteCascade(knex, trx, 'exam_passages', 'section_id', 'exam_sections')
      await addOnDeleteCascade(knex, trx, 'exam_logs', 'exam_id', 'exams')
      await addOnDeleteSetNull(knex, trx, 'exam_logs', 'admin_id', 'admins')
      // // await addOnDeleteCascade(knex, trx, 'student_exams', 'layout_id', 'layouts') // we don't want to allow to remove layout if it's used in exam
      await addOnDeleteCascade(knex, trx, 'student_exams', 'student_id', 'students')
      await addOnDeleteCascade(knex, trx, 'student_exam_sections', 'student_exam_id', 'student_exams')
      await addOnDeleteCascade(knex, trx, 'student_exam_passages', 'student_section_id', 'student_exam_sections')
      // // await addOnDeleteCascade(knex, trx, 'exams', 'exam_type_id', 'exam_types') // we don't want to allow to remove exam type if it's used in exam
      // await addOnDeleteCascade(knex, trx, 'scaled_scores', 'template_id', 'scaled_score_templates') // ???
      // await addOnDeleteCascade(knex, trx, 'exam_sections', 'scaled_score_template_id', 'scaled_score_templates')
      // await addOnDeleteCascade(knex, trx, 'student_exam_sections', 'scaled_score_template_id', 'scaled_score_templates')
      // // await addOnDeleteCascade(knex, trx, 'student_exam_scores', 'exam_type_id', 'exam_types') // we don't want to allow to remove exam type if it's used in exam scores
      // await addOnDeleteCascade(knex, trx, 'student_exam_scores', 'exam_layout_id', 'layouts')
      await addOnDeleteCascade(knex, trx, 'student_exam_scores', 'student_id', 'students')
      await addOnDeleteCascade(knex, trx, 'student_exam_logs', 'exam_id', 'student_exams')
      await addOnDeleteSetNull(knex, trx, 'student_exam_logs', 'admin_id', 'admins')
      // // await addOnDeleteCascade(knex, trx, 'percentile_rank', 'exam_type_id', 'exam_types') // we don't want to allow to remove exam type if it's used in percentile rank
      // // await addOnDeleteCascade(knex, trx, 'exam_type_scaled_score_templates', 'exam_type_id', 'exam_types') // we don't want to allow to remove exam type if it's used in exam type scaled score templates
      await addOnDeleteCascade(knex, trx, 'exam_type_scaled_score_templates', 'template_id', 'scaled_score_templates')
      // await addOnDeleteCascade(knex, trx, 'books', 'course_id', 'book_courses')
      await addOnDeleteCascade(knex, trx, 'book_chapters', 'book_id', 'books')
      await addOnDeleteCascade(knex, trx, 'book_subchapters', 'chapter_id', 'book_chapters')
      // // await addOnDeleteCascade(knex, trx, 'book_contents', 'subchapter_id', 'book_subchapters')
      // // // await addOnDeleteCascade(knex, trx, 'book_content_flashcards', 'content_id', 'book_contents')
      // // await addOnDeleteCascade(knex, trx, 'book_content_attachments', 'content_id', 'book_contents')
      // // await addOnDeleteCascade(knex, trx, 'book_content_resources', 'content_id', 'book_contents')
      await addOnDeleteCascade(knex, trx, 'book_content_images', 'content_id', 'book_contents')
      await addOnDeleteCascade(knex, trx, 'book_content_questions', 'content_id', 'book_contents')
      await addOnDeleteCascade(knex, trx, 'exam_question_time_metrics', 'exam_id', 'exams')
      await addOnDeleteCascade(knex, trx, 'exam_question_time_metrics', 'exam_question_id', 'exam_questions')
      await addOnDeleteCascade(knex, trx, 'exam_passage_time_metrics', 'exam_id', 'exams')
      await addOnDeleteCascade(knex, trx, 'exam_passage_time_metrics', 'exam_passage_id', 'exam_passages')
      await addOnDeleteCascade(knex, trx, 'book_content_flashcards', 'content_id', 'book_contents')
      // // // await addOnDeleteCascade(knex, trx, 'book_content_flashcards', 'flashcard_id', 'flashcards') // we should think if we want to allow to remove flashcard if it's used in book content flashcard
      await addOnDeleteCascade(knex, trx, 'student_books', 'student_id', 'students')
      await addOnDeleteSetNull(knex, trx, 'student_books', 'course_id', 'book_courses')
      await addOnDeleteCascade(knex, trx, 'student_book_chapters', 'book_id', 'student_books')
      await addOnDeleteCascade(knex, trx, 'student_book_subchapters', 'chapter_id', 'student_book_chapters')
      await addOnDeleteCascade(knex, trx, 'student_book_contents', 'subchapter_id', 'student_book_subchapters')
      await addOnDeleteCascade(knex, trx, 'student_book_content_flashcards', 'content_id', 'student_book_contents')
      await addOnDeleteCascade(knex, trx, 'student_book_content_resources', 'content_id', 'student_book_contents')
      await addOnDeleteCascade(knex, trx, 'student_book_content_images', 'content_id', 'student_book_contents')
      await addOnDeleteCascade(knex, trx, 'student_book_content_questions', 'content_id', 'student_book_contents')
      await addOnDeleteCascade(knex, trx, 'attached_exams', 'exam_id', 'exams')
      await addOnDeleteCascade(knex, trx, 'student_book_subchapter_notes', 'subchapter_id', 'student_book_subchapters')
      await addOnDeleteCascade(knex, trx, 'student_book_subchapter_notes', 'student_id', 'students')
      await addOnDeleteCascade(knex, trx, 'salty_bucks_logs', 'student_id', 'students')
      // // await addOnDeleteCascade(knex, trx, 'stopwatches', 'course_id', 'book_courses') // not relevant
      await addOnDeleteCascade(knex, trx, 'stopwatches', 'student_id', 'students')
      // // // // await addOnDeleteCascade(knex, trx, 'book_content_questions', 'content_id', 'book_contents')
      await addOnDeleteCascade(knex, trx, 'book_content_questions', 'question_id', 'questions')
      await addOnDeleteCascade(knex, trx, 'exam_intro_pages', 'exam_type_id', 'exam_types')
      await addOnDeleteCascade(knex, trx, 'course_map', 'book_course_id', 'book_courses')
      await addOnDeleteCascade(knex, trx, 'student_courses', 'student_id', 'students')
      await addOnDeleteCascade(knex, trx, 'student_books', 'course_id', 'student_courses')
      await addOnDeleteCascade(knex, trx, 'student_attached_exams', 'exam_id', 'student_exams')
      await addOnDeleteCascade(knex, trx, 'student_attached_exams', 'course_id', 'student_courses')
      await addOnDeleteSetNull(knex, trx, 'course_books', 'free_trial_exam_id', 'exams')
      await addOnDeleteCascade(knex, trx, 'course_books', 'course_id', 'courses')
      await addOnDeleteCascade(knex, trx, 'course_books', 'book_id', 'books')
      await addOnDeleteCascade(knex, trx, 'stopwatches', 'student_course_id', 'student_courses')
      await addOnDeleteCascade(knex, trx, 'chapter_admins', 'admin_id', 'admins')
      await addOnDeleteCascade(knex, trx, 'chapter_admins', 'chapter_id', 'book_chapters')
      await addOnDeleteCascade(knex, trx, 'chapter_admins', 'book_id', 'books')
      await addOnDeleteCascade(knex, trx, 'salty_bucks_daily_log', 'student_id', 'students')
      await addOnDeleteCascade(knex, trx, 'exam_section_scores', 'section_id', 'exam_sections')
      await addOnDeleteCascade(knex, trx, 'exam_scores', 'exam_id', 'exams')
      await addOnDeleteCascade(knex, trx, 'student_book_chapter_activity_timers', 'student_id', 'students')
      await addOnDeleteCascade(knex, trx, 'student_book_chapter_activity_timers', 'student_course_id', 'student_courses')
      await addOnDeleteCascade(knex, trx, 'student_book_chapter_activity_timers', 'student_book_id', 'student_books')
      await addOnDeleteCascade(knex, trx, 'student_book_chapter_activity_timers', 'student_book_chapter_id', 'student_book_chapters')
      await addOnDeleteCascade(knex, trx, 'student_book_activity_timers', 'student_id', 'students')
      await addOnDeleteCascade(knex, trx, 'student_book_activity_timers', 'student_course_id', 'student_courses')
      await addOnDeleteCascade(knex, trx, 'student_book_activity_timers', 'student_book_id', 'student_books')
      await addOnDeleteCascade(knex, trx, 'student_course_activity_timers', 'student_id', 'students')
      await addOnDeleteCascade(knex, trx, 'student_course_activity_timers', 'student_course_id', 'student_courses')
      await addOnDeleteCascade(knex, trx, 'video_activity_timers', 'student_id', 'students')
      await addOnDeleteCascade(knex, trx, 'video_activity_timers', 'student_course_id', 'student_courses')
      await addOnDeleteCascade(knex, trx, 'video_activity_timers', 'student_book_id', 'student_books')
      await addOnDeleteCascade(knex, trx, 'video_activity_timers', 'video_id', 'student_book_content_resources')
      await addOnDeleteCascade(knex, trx, 'flashcard_activity_timers', 'student_id', 'students')
      await addOnDeleteCascade(knex, trx, 'flashcard_activity_timers', 'student_course_id', 'student_courses')
      await addOnDeleteCascade(knex, trx, 'flashcard_activity_timers', 'student_book_id', 'student_books')
      await addOnDeleteCascade(knex, trx, 'flashcard_activity_timers', 'flashcard_id', 'student_book_content_flashcards')
      await addOnDeleteCascade(knex, trx, 'book_chapter_images', 'chapter_id', 'book_chapters')
      await addOnDeleteCascade(knex, trx, 'student_book_chapter_images', 'chapter_id', 'student_book_chapters')
      // ?? ?? await addOnDeleteCascade(knex, trx, 'student_book_chapters', 'bookmark_id', 'student_book_contents')
      await addOnDeleteCascade(knex, trx, 'student_book_content_pins', 'content_id', 'student_book_contents')
      await addOnDeleteCascade(knex, trx, 'student_pin_variants', 'student_id', 'students')
      await addOnDeleteCascade(knex, trx, 'student_pin_variants', 'student_book_id', 'student_books')
      await addOnDeleteCascade(knex, trx, 'student_completion_meters', 'student_id', 'students')
      await addOnDeleteCascade(knex, trx, 'student_completion_meters', 'student_course_id', 'student_courses')
      await addOnDeleteCascade(knex, trx, 'student_book_contents_read', 'student_id', 'students')
      await addOnDeleteCascade(knex, trx, 'student_book_contents_read', 'student_course_id', 'student_courses')
      await addOnDeleteCascade(knex, trx, 'student_book_contents_read', 'student_book_id', 'student_books')
      await addOnDeleteCascade(knex, trx, 'amino_acid_games', 'student_id', 'students')
      await addOnDeleteCascade(knex, trx, 'student_tokens', 'student_id', 'students')
      await addOnDeleteCascade(knex, trx, 'book_admins', 'admin_id', 'admins')
      await addOnDeleteCascade(knex, trx, 'book_admins', 'book_id', 'books')
      await addOnDeleteCascade(knex, trx, 'user_tokens', 'user_id', 'users')
      await addOnDeleteCascade(knex, trx, 'course_topics', 'course_id', 'courses')
      await addOnDeleteCascade(knex, trx, 'student_flashcard_archive', 'student_flashcard_id', 'student_book_content_flashcards')
      await addOnDeleteCascade(knex, trx, 'student_flashcard_archive', 'student_course_id', 'student_courses')
      await addOnDeleteCascade(knex, trx, 'student_flashcard_boxes', 'student_course_id', 'student_courses')
      await addOnDeleteCascade(knex, trx, 'student_flashcard_boxes', 'student_book_id', 'student_books')
      await addOnDeleteCascade(knex, trx, 'student_box_flashcards', 'student_flashcard_id', 'student_book_content_flashcards')
      await addOnDeleteCascade(knex, trx, 'book_content_course_topics', 'course_id', 'courses')
      await addOnDeleteCascade(knex, trx, 'book_content_course_topics', 'book_id', 'books')
      await addOnDeleteCascade(knex, trx, 'book_content_course_topics', 'book_content_id', 'book_contents')
      await addOnDeleteCascade(knex, trx, 'book_content_course_topics', 'course_topic_id', 'course_topics')
      await addOnDeleteCascade(knex, trx, 'student_course_topics', 'student_course_id', 'student_courses')
      await addOnDeleteCascade(knex, trx, 'student_book_content_course_topics', 'student_course_id', 'student_courses')
      await addOnDeleteCascade(knex, trx, 'student_book_content_course_topics', 'student_book_id', 'student_books')
      await addOnDeleteCascade(knex, trx, 'student_book_content_course_topics', 'student_book_content_id', 'student_book_contents')
      await addOnDeleteCascade(knex, trx, 'student_book_content_course_topics', 'student_course_topic_id', 'student_course_topics')
      await addOnDeleteCascade(knex, trx, 'book_content_comments', 'course_id', 'courses')
      await addOnDeleteCascade(knex, trx, 'book_content_comments', 'book_content_id', 'book_contents')
      await addOnDeleteCascade(knex, trx, 'student_book_content_comments', 'student_course_id', 'student_courses')
      // await addOnDeleteCascade(knex, trx, 'student_book_content_comments', 'original_book_content_id', 'book_contents')
      await addOnDeleteCascade(knex, trx, 'exam_score_stats', 'exam_id', 'exams')
      await addOnDeleteCascade(knex, trx, 'exam_section_score_map', 'exam_id', 'exams')
      await addOnDeleteCascade(knex, trx, 'exam_section_score_map', 'section_id', 'exam_sections')
      await addOnDeleteCascade(knex, trx, 'exam_score_map', 'exam_id', 'exams')
      await addOnDeleteCascade(knex, trx, 'course_end_dates', 'course_id', 'courses')
      await addOnDeleteSetNull(knex, trx, 'notifications', 'author_id', 'admins')
      await addOnDeleteSetNull(knex, trx, 'student_courses', 'end_date_id', 'course_end_dates')
      await addOnDeleteCascade(knex, trx, 'respiration_games', 'student_id', 'students')
      await addOnDeleteCascade(knex, trx, 'group_tutoring_days', 'course_id', 'courses')

      await trx.commit()
    } catch (err) {
      await trx.rollback()
      throw err
    }
  })
}

const down = async knex => {
  return knex.transaction(async (trx) => {
    try {
      // // await removeOnDelete(knex, trx, 'exams', 'layout_id', 'layouts') // we don't want to allow to remove layout if it's used in exam
      await removeOnDelete(knex, trx, 'exams', 'uploaded_by', 'admins')
      await removeOnDelete(knex, trx, 'exam_sections', 'exam_id', 'exams')
      await removeOnDelete(knex, trx, 'exam_passages', 'section_id', 'exam_sections')
      await removeOnDelete(knex, trx, 'exam_logs', 'exam_id', 'exams')
      await removeOnDelete(knex, trx, 'exam_logs', 'admin_id', 'admins')
      // // await removeOnDelete(knex, trx, 'student_exams', 'layout_id', 'layouts') // we don't want to allow to remove layout if it's used in exam
      await removeOnDelete(knex, trx, 'student_exams', 'student_id', 'students')
      await removeOnDelete(knex, trx, 'student_exam_sections', 'student_exam_id', 'student_exams')
      await removeOnDelete(knex, trx, 'student_exam_passages', 'student_section_id', 'student_exam_sections')
      // // await removeOnDelete(knex, trx, 'exams', 'exam_type_id', 'exam_types') // we don't want to allow to remove exam type if it's used in exam
      // await removeOnDelete(knex, trx, 'scaled_scores', 'template_id', 'scaled_score_templates') // ???
      // await removeOnDelete(knex, trx, 'exam_sections', 'scaled_score_template_id', 'scaled_score_templates')
      // await removeOnDelete(knex, trx, 'student_exam_sections', 'scaled_score_template_id', 'scaled_score_templates')
      // // await removeOnDelete(knex, trx, 'student_exam_scores', 'exam_type_id', 'exam_types') // we don't want to allow to remove exam type if it's used in exam scores
      // await removeOnDelete(knex, trx, 'student_exam_scores', 'exam_layout_id', 'layouts')
      await removeOnDelete(knex, trx, 'student_exam_scores', 'student_id', 'students')
      await removeOnDelete(knex, trx, 'student_exam_logs', 'exam_id', 'student_exams')
      await removeOnDelete(knex, trx, 'student_exam_logs', 'admin_id', 'admins')
      // // await removeOnDelete(knex, trx, 'percentile_rank', 'exam_type_id', 'exam_types') // we don't want to allow to remove exam type if it's used in percentile rank
      // // await removeOnDelete(knex, trx, 'exam_type_scaled_score_templates', 'exam_type_id', 'exam_types') // we don't want to allow to remove exam type if it's used in exam type scaled score templates
      await removeOnDelete(knex, trx, 'exam_type_scaled_score_templates', 'template_id', 'scaled_score_templates')
      // await removeOnDelete(knex, trx, 'books', 'course_id', 'book_courses')
      await removeOnDelete(knex, trx, 'book_chapters', 'book_id', 'books')
      await removeOnDelete(knex, trx, 'book_subchapters', 'chapter_id', 'book_chapters')
      // // await removeOnDelete(knex, trx, 'book_contents', 'subchapter_id', 'book_subchapters')
      // // // await removeOnDelete(knex, trx, 'book_content_flashcards', 'content_id', 'book_contents')
      // // await removeOnDelete(knex, trx, 'book_content_attachments', 'content_id', 'book_contents')
      // // await removeOnDelete(knex, trx, 'book_content_resources', 'content_id', 'book_contents')
      await removeOnDelete(knex, trx, 'book_content_images', 'content_id', 'book_contents')
      await removeOnDelete(knex, trx, 'book_content_questions', 'content_id', 'book_contents')
      await removeOnDelete(knex, trx, 'exam_question_time_metrics', 'exam_id', 'exams')
      await removeOnDelete(knex, trx, 'exam_question_time_metrics', 'exam_question_id', 'exam_questions')
      await removeOnDelete(knex, trx, 'exam_passage_time_metrics', 'exam_id', 'exams')
      await removeOnDelete(knex, trx, 'exam_passage_time_metrics', 'exam_passage_id', 'exam_passages')
      await removeOnDelete(knex, trx, 'book_content_flashcards', 'content_id', 'book_contents')
      // // // await removeOnDelete(knex, trx, 'book_content_flashcards', 'flashcard_id', 'flashcards') // we should think if we want to allow to remove flashcard if it's used in book content flashcard
      await removeOnDelete(knex, trx, 'student_books', 'student_id', 'students')
      await removeOnDelete(knex, trx, 'student_books', 'course_id', 'book_courses')
      await removeOnDelete(knex, trx, 'student_book_chapters', 'book_id', 'student_books')
      await removeOnDelete(knex, trx, 'student_book_subchapters', 'chapter_id', 'student_book_chapters')
      await removeOnDelete(knex, trx, 'student_book_contents', 'subchapter_id', 'student_book_subchapters')
      await removeOnDelete(knex, trx, 'student_book_content_flashcards', 'content_id', 'student_book_contents')
      await removeOnDelete(knex, trx, 'student_book_content_resources', 'content_id', 'student_book_contents')
      await removeOnDelete(knex, trx, 'student_book_content_images', 'content_id', 'student_book_contents')
      await removeOnDelete(knex, trx, 'student_book_content_questions', 'content_id', 'student_book_contents')
      await removeOnDelete(knex, trx, 'attached_exams', 'exam_id', 'exams')
      await removeOnDelete(knex, trx, 'student_book_subchapter_notes', 'subchapter_id', 'student_book_subchapters')
      await removeOnDelete(knex, trx, 'student_book_subchapter_notes', 'student_id', 'students')
      await removeOnDelete(knex, trx, 'salty_bucks_logs', 'student_id', 'students')
      // // await removeOnDelete(knex, trx, 'stopwatches', 'course_id', 'book_courses') // not relevant
      await removeOnDelete(knex, trx, 'stopwatches', 'student_id', 'students')
      // // // // await removeOnDelete(knex, trx, 'book_content_questions', 'content_id', 'book_contents')
      await removeOnDelete(knex, trx, 'book_content_questions', 'question_id', 'questions')
      await removeOnDelete(knex, trx, 'exam_intro_pages', 'exam_type_id', 'exam_types')
      await removeOnDelete(knex, trx, 'course_map', 'book_course_id', 'book_courses')
      await removeOnDelete(knex, trx, 'student_courses', 'student_id', 'students')
      await removeOnDelete(knex, trx, 'student_books', 'course_id', 'student_courses')
      await removeOnDelete(knex, trx, 'student_attached_exams', 'exam_id', 'student_exams')
      await removeOnDelete(knex, trx, 'student_attached_exams', 'course_id', 'student_courses')
      await removeOnDelete(knex, trx, 'course_books', 'free_trial_exam_id', 'exams')
      await removeOnDelete(knex, trx, 'course_books', 'course_id', 'courses')
      await removeOnDelete(knex, trx, 'course_books', 'book_id', 'books')
      await removeOnDelete(knex, trx, 'stopwatches', 'student_course_id', 'student_courses')
      await removeOnDelete(knex, trx, 'chapter_admins', 'admin_id', 'admins')
      await removeOnDelete(knex, trx, 'chapter_admins', 'chapter_id', 'book_chapters')
      await removeOnDelete(knex, trx, 'chapter_admins', 'book_id', 'books')
      await removeOnDelete(knex, trx, 'salty_bucks_daily_log', 'student_id', 'students')
      await removeOnDelete(knex, trx, 'exam_section_scores', 'section_id', 'exam_sections')
      await removeOnDelete(knex, trx, 'exam_scores', 'exam_id', 'exams')
      await removeOnDelete(knex, trx, 'student_book_chapter_activity_timers', 'student_id', 'students')
      await removeOnDelete(knex, trx, 'student_book_chapter_activity_timers', 'student_course_id', 'student_courses')
      await removeOnDelete(knex, trx, 'student_book_chapter_activity_timers', 'student_book_id', 'student_books')
      await removeOnDelete(knex, trx, 'student_book_chapter_activity_timers', 'student_book_chapter_id', 'student_book_chapters')
      await removeOnDelete(knex, trx, 'student_book_activity_timers', 'student_id', 'students')
      await removeOnDelete(knex, trx, 'student_book_activity_timers', 'student_course_id', 'student_courses')
      await removeOnDelete(knex, trx, 'student_book_activity_timers', 'student_book_id', 'student_books')
      await removeOnDelete(knex, trx, 'student_course_activity_timers', 'student_id', 'students')
      await removeOnDelete(knex, trx, 'student_course_activity_timers', 'student_course_id', 'student_courses')
      await removeOnDelete(knex, trx, 'video_activity_timers', 'student_id', 'students')
      await removeOnDelete(knex, trx, 'video_activity_timers', 'student_course_id', 'student_courses')
      await removeOnDelete(knex, trx, 'video_activity_timers', 'student_book_id', 'student_books')
      await removeOnDelete(knex, trx, 'video_activity_timers', 'video_id', 'student_book_content_resources')
      await removeOnDelete(knex, trx, 'flashcard_activity_timers', 'student_id', 'students')
      await removeOnDelete(knex, trx, 'flashcard_activity_timers', 'student_course_id', 'student_courses')
      await removeOnDelete(knex, trx, 'flashcard_activity_timers', 'student_book_id', 'student_books')
      await removeOnDelete(knex, trx, 'flashcard_activity_timers', 'flashcard_id', 'student_book_content_flashcards')
      await removeOnDelete(knex, trx, 'book_chapter_images', 'chapter_id', 'book_chapters')
      await removeOnDelete(knex, trx, 'student_book_chapter_images', 'chapter_id', 'student_book_chapters')
      // ?? ?? await removeOnDelete(knex, trx, 'student_book_chapters', 'bookmark_id', 'student_book_contents')
      await removeOnDelete(knex, trx, 'student_book_content_pins', 'content_id', 'student_book_contents')
      await removeOnDelete(knex, trx, 'student_pin_variants', 'student_id', 'students')
      await removeOnDelete(knex, trx, 'student_pin_variants', 'student_book_id', 'student_books')
      await removeOnDelete(knex, trx, 'student_completion_meters', 'student_id', 'students')
      await removeOnDelete(knex, trx, 'student_completion_meters', 'student_course_id', 'student_courses')
      await removeOnDelete(knex, trx, 'student_book_contents_read', 'student_id', 'students')
      await removeOnDelete(knex, trx, 'student_book_contents_read', 'student_course_id', 'student_courses')
      await removeOnDelete(knex, trx, 'student_book_contents_read', 'student_book_id', 'student_books')
      await removeOnDelete(knex, trx, 'amino_acid_games', 'student_id', 'students')
      await removeOnDelete(knex, trx, 'student_tokens', 'student_id', 'students')
      await removeOnDelete(knex, trx, 'book_admins', 'admin_id', 'admins')
      await removeOnDelete(knex, trx, 'book_admins', 'book_id', 'books')
      await removeOnDelete(knex, trx, 'user_tokens', 'user_id', 'users')
      await removeOnDelete(knex, trx, 'course_topics', 'course_id', 'courses')
      await removeOnDelete(knex, trx, 'student_flashcard_archive', 'student_flashcard_id', 'student_book_content_flashcards')
      await removeOnDelete(knex, trx, 'student_flashcard_archive', 'student_course_id', 'student_courses')
      await removeOnDelete(knex, trx, 'student_flashcard_boxes', 'student_course_id', 'student_courses')
      await removeOnDelete(knex, trx, 'student_flashcard_boxes', 'student_book_id', 'student_books')
      await removeOnDelete(knex, trx, 'student_box_flashcards', 'student_flashcard_id', 'student_book_content_flashcards')
      await removeOnDelete(knex, trx, 'book_content_course_topics', 'course_id', 'courses')
      await removeOnDelete(knex, trx, 'book_content_course_topics', 'book_id', 'books')
      await removeOnDelete(knex, trx, 'book_content_course_topics', 'book_content_id', 'book_contents')
      await removeOnDelete(knex, trx, 'book_content_course_topics', 'course_topic_id', 'course_topics')
      await removeOnDelete(knex, trx, 'student_course_topics', 'student_course_id', 'student_courses')
      await removeOnDelete(knex, trx, 'student_book_content_course_topics', 'student_course_id', 'student_courses')
      await removeOnDelete(knex, trx, 'student_book_content_course_topics', 'student_book_id', 'student_books')
      await removeOnDelete(knex, trx, 'student_book_content_course_topics', 'student_book_content_id', 'student_book_contents')
      await removeOnDelete(knex, trx, 'student_book_content_course_topics', 'student_course_topic_id', 'student_course_topics')
      await removeOnDelete(knex, trx, 'book_content_comments', 'course_id', 'courses')
      await removeOnDelete(knex, trx, 'book_content_comments', 'book_content_id', 'book_contents')
      await removeOnDelete(knex, trx, 'student_book_content_comments', 'student_course_id', 'student_courses')
      // await removeOnDelete(knex, trx, 'student_book_content_comments', 'original_book_content_id', 'book_contents')
      await removeOnDelete(knex, trx, 'exam_score_stats', 'exam_id', 'exams')
      await removeOnDelete(knex, trx, 'exam_section_score_map', 'exam_id', 'exams')
      await removeOnDelete(knex, trx, 'exam_section_score_map', 'section_id', 'exam_sections')
      await removeOnDelete(knex, trx, 'exam_score_map', 'exam_id', 'exams')
      await removeOnDelete(knex, trx, 'course_end_dates', 'course_id', 'courses')
      await removeOnDelete(knex, trx, 'notifications', 'author_id', 'admins') // probalby not needed
      await removeOnDelete(knex, trx, 'student_courses', 'end_date_id', 'course_end_dates')
      await removeOnDelete(knex, trx, 'respiration_games', 'student_id', 'students')
      await removeOnDelete(knex, trx, 'group_tutoring_days', 'course_id', 'courses')

      await trx.commit()
    } catch (err) {
      await trx.rollback()
      throw err
    }
  })
}
