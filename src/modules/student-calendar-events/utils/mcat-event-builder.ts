import * as R from 'ramda'
import moment from 'moment'
import { StudentCourse } from '../../../types/student-course'
import { buildBookEvents } from './book-events-builder'
import { deleteAutoGeneratedCalendarEvents } from '../student-calendar-events-service'
import { buildFullExamEvents } from './full-exam-events-builder'
import { scheduleCalendarEvents } from '../../../../services/student-calendar-events/schedule-events-coles-algorithm'
import { collectionToJson } from '../../../../utils/model/collection-to-json'
import { find as findCalendarFullExams } from '../../calendar-full-exams/calendar-full-exams-repository'
import { find as findCalendarChapters } from '../../calendar-chapters/calendar-chapters-repository'
import { flattenAndDivideEventSchedule } from './flatten-and-divide-event-schedule'
import { CalendarEventStatus } from '../calendar-event-status'

const DEFAULT_PRIORITY_DAYS = [6, 0, 1, 4, 2, 3, 7]

const getCalendarFullExams = async (studentCourse: StudentCourse) => (
  R.pipeWith(R.andThen)([
    async studentCourse => findCalendarFullExams({ limit: { page: 1, take: 1000 }, order: { by: 'order', dir: 'asc' } }, { course_id: studentCourse.book_course_id }),
    R.prop('data'),
    collectionToJson,
  ])(studentCourse)
)

const getCalendarChapters = async (studentCourse: StudentCourse) => (
  R.pipeWith(R.andThen)([
    async studentCourse => findCalendarChapters({ limit: { page: 1, take: 1000 }, order: { by: 'order', dir: 'asc' } }, { course_id: studentCourse.book_course_id }, ['chapter.book', 'chapter.attached', 'chapter.subchapters.contents']),
    R.prop('data'),
    collectionToJson,
  ])(studentCourse)
)

export const buildCalendarEventsForMCAT = async (studentCourse: StudentCourse, debug = false, archived = false) => {
  const [calendarFullExams, calendarChapters] = await Promise.all([
    getCalendarFullExams(studentCourse),
    getCalendarChapters(studentCourse),
    deleteAutoGeneratedCalendarEvents(studentCourse),
  ])

  const prioridays = (studentCourse.prioridays || DEFAULT_PRIORITY_DAYS) as number[]

  const eventSchedule = scheduleCalendarEvents({
    startDate: moment(studentCourse.calendar_start_at),
    endDate: archived ? moment().add(300, 'days') : moment(studentCourse.exam_at),
    prioridays: archived ? DEFAULT_PRIORITY_DAYS : prioridays,
    numTasks: calendarChapters.length,
    numTests: calendarFullExams.length,
  }, debug)

  const [examScheduleEvents, chapterScheduleEvents] = flattenAndDivideEventSchedule(eventSchedule)

  await buildBookEvents(chapterScheduleEvents, studentCourse, false, archived)
  await buildFullExamEvents(examScheduleEvents, studentCourse, false, prioridays, archived)
}

export const rescheduleCalendarEventsForMCAT = async (studentCourse: StudentCourse, debug = false, archive = false) => {
  const [calendarFullExams, calendarChapters] = await Promise.all([
    getCalendarFullExams(studentCourse),
    getCalendarChapters(studentCourse),
    deleteAutoGeneratedCalendarEvents(studentCourse, true, { status: CalendarEventStatus.incomplete }),
  ])

  const prioridays = (studentCourse.prioridays || DEFAULT_PRIORITY_DAYS) as number[]

  const eventSchedule = scheduleCalendarEvents({
    startDate: moment(studentCourse.calendar_start_at),
    endDate: moment(studentCourse.exam_at),
    prioridays: prioridays,
    numTasks: calendarChapters.length,
    numTests: calendarFullExams.length,
  }, debug)

  const [examScheduleEvents, chapterScheduleEvents] = flattenAndDivideEventSchedule(eventSchedule)

  await buildBookEvents(chapterScheduleEvents, studentCourse, true, archive)
  await buildFullExamEvents(examScheduleEvents, studentCourse, true, prioridays, archive)
}

export const buildCalendarEventsForMCATForManualSetup = async (studentCourse: StudentCourse, debug = false) => {
  const [calendarFullExams, calendarChapters] = await Promise.all([
    getCalendarFullExams(studentCourse),
    getCalendarChapters(studentCourse),
    deleteAutoGeneratedCalendarEvents(studentCourse),
  ])

  const prioridays = (studentCourse.prioridays || DEFAULT_PRIORITY_DAYS) as number[]

  // Fabricated dates so the algorithm can work
  const startDate = moment()
  const endDate = moment().add(30, 'days')

  const eventSchedule = scheduleCalendarEvents({
    startDate: startDate,
    endDate: endDate,
    prioridays: prioridays,
    numTasks: calendarChapters.length,
    numTests: calendarFullExams.length,
  }, debug)

  const [examScheduleEvents, chapterScheduleEvents] = flattenAndDivideEventSchedule(eventSchedule)

  await buildBookEvents(chapterScheduleEvents, studentCourse, false, true)
  await buildFullExamEvents(examScheduleEvents, studentCourse, false, prioridays, true)
}
